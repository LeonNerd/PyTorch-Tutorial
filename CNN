import torch
from torch .autograd import Variable
import torchvision

import torch.utils.data as Data
import torch.functional as F
import torch.nn as nn


# Hyper Parameters
EPOCH = 5
BATCH_SIZE = 100
LR = 0.001
DOWNLOAD_MNIST = True

# Mnist digits dataset
train_data = torchvision.datasets.MNIST(
    root='./mnist/',
    train=True,  # this is training data
    transform=torchvision.transforms.ToTensor(),  # Converts a PIL.Image or numpy.ndarray to tensor

    download=DOWNLOAD_MNIST,
)

# Data Loader for easy mini-batch return in training, the image batch shape will be (50, 1, 28, 28)
train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=True)

# pick 2000 samples to speed up testing
text_data = torchvision.datasets.MNIST(root='./mnist', train=False)
text_x = torch.unsqueeze(text_data.test_data, dim=1).type(torch.FloatTensor)[:3000].cuda()/255.
test_y = text_data.test_labels[:3000].cuda()

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Sequential(        # input shape (1, 28, 28)
            nn.Conv2d(
                in_channels=1,             # input height
                out_channels=16,            #n_filters
                kernel_size=5,              #filters  size
                stride=1,
                padding=2,
            ),                              # 16*28*28
            nn.ReLU(),                      # 16*28*28
            nn.MaxPool2d(kernel_size=2)     # 16*14*14
        )
        self.conv2 = nn.Sequential(         # input shape (16, 14, 14)
            nn.Conv2d(16,32,5,1,2),         #32*14*14
            nn.ReLU(),
            nn.MaxPool2d(2)                 #32*7*7
        )
        self.out = nn.Linear(32 * 7 * 7, 10)    #fully connected layer, output 10 classes

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)                 #(batch, 32, 7, 7)
        x = x.view(x.size(0), -1)        #(batch, 32 * 7 * 7)
        output = self.out(x)
        return output, x

cnn = CNN()
cnn.cuda()
print(cnn)  # net architecture

optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)
loss_func = nn.CrossEntropyLoss()

# training and testing
for epoch in range(EPOCH):
    for step, (x, y) in enumerate(train_loader):  # gives batch data, normalize x when iterate train_loader

        b_x = x.cuda()  # Tensor on GPU
        b_y = y.cuda()  # Tensor on GPU

        output = cnn(b_x)[0]  # cnn output
        loss = loss_func(output, b_y)  # cross entropy loss
        optimizer.zero_grad()  # clear gradients for this training step
        loss.backward()  # backpropagation, compute gradients
        optimizer.step()  # apply gradients

        if step % 500 == 0:
            test_output, last_layer = cnn(text_x)

            #pred_y = torch.max(test_output, 1)[1].cuda().data.numpy
            pred_y = torch.max(test_output, 1)[1].cuda().data

            #accuracy = float((pred_y == test_y.data.numpy()).astype(int).sum()) / float(test_y.size(0))
            accuracy = torch.sum(pred_y == test_y).type(torch.FloatTensor) / test_y.size(0)

            #print('Epoch: ', epoch, '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)
            print('Epoch: ', epoch, '| train loss: %.4f' % loss.data.cpu().numpy(), '| test accuracy: %.2f' % accuracy)

# print 10 predictions from test data
    test_output, _ = cnn(text_x[:10])

    # pred_y = torch.max(test_output, 1)[1].cuda().data.numpy
    pred_y = torch.max(test_output, 1)[1].cuda().data

    print(pred_y, 'prediction number')
    print(test_y[:10], 'real number')

